/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import {
  useBookingApiContext,
  BookingApiContext,
  queryKeyFn,
} from "./bookingApiContext";
import { deepMerge } from "./bookingApiUtils";
import type * as Fetcher from "./bookingApiFetcher";
import { bookingApiFetch } from "./bookingApiFetcher";
import type * as Schemas from "./bookingApiSchemas";

type QueryFnOptions = {
  signal?: AbortController["signal"];
};

export type GetAllLocationsQueryParams = {
  limit?: number;
  locationType?: Schemas.LocationType;
};

export type GetAllLocationsError = Fetcher.ErrorWrapper<undefined>;

export type GetAllLocationsResponse = Schemas.LocationDto[];

export type GetAllLocationsVariables = {
  queryParams?: GetAllLocationsQueryParams;
} & BookingApiContext["fetcherOptions"];

export const fetchGetAllLocations = (
  variables: GetAllLocationsVariables,
  signal?: AbortSignal,
) =>
  bookingApiFetch<
    GetAllLocationsResponse,
    GetAllLocationsError,
    undefined,
    {},
    GetAllLocationsQueryParams,
    {}
  >({ url: "/api/locations", method: "get", ...variables, signal });

export function getAllLocationsQuery(variables: GetAllLocationsVariables): {
  queryKey: reactQuery.QueryKey;
  queryFn: (options: QueryFnOptions) => Promise<GetAllLocationsResponse>;
};

export function getAllLocationsQuery(
  variables: GetAllLocationsVariables | reactQuery.SkipToken,
): {
  queryKey: reactQuery.QueryKey;
  queryFn:
    | ((options: QueryFnOptions) => Promise<GetAllLocationsResponse>)
    | reactQuery.SkipToken;
};

export function getAllLocationsQuery(
  variables: GetAllLocationsVariables | reactQuery.SkipToken,
) {
  return {
    queryKey: queryKeyFn({
      path: "/api/locations",
      operationId: "getAllLocations",
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) =>
            fetchGetAllLocations(variables, signal),
  };
}

export const useSuspenseGetAllLocations = <TData = GetAllLocationsResponse,>(
  variables: GetAllLocationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetAllLocationsResponse,
      GetAllLocationsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBookingApiContext(options);
  return reactQuery.useSuspenseQuery<
    GetAllLocationsResponse,
    GetAllLocationsError,
    TData
  >({
    ...getAllLocationsQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

export const useGetAllLocations = <TData = GetAllLocationsResponse,>(
  variables: GetAllLocationsVariables | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetAllLocationsResponse,
      GetAllLocationsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBookingApiContext(options);
  return reactQuery.useQuery<
    GetAllLocationsResponse,
    GetAllLocationsError,
    TData
  >({
    ...getAllLocationsQuery(
      variables === reactQuery.skipToken
        ? variables
        : deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export type GetLocationByIdPathParams = {
  /**
   * @format uuid
   */
  id: string;
};

export type GetLocationByIdError = Fetcher.ErrorWrapper<undefined>;

export type GetLocationByIdVariables = {
  pathParams: GetLocationByIdPathParams;
} & BookingApiContext["fetcherOptions"];

export const fetchGetLocationById = (
  variables: GetLocationByIdVariables,
  signal?: AbortSignal,
) =>
  bookingApiFetch<
    Schemas.LocationDto,
    GetLocationByIdError,
    undefined,
    {},
    {},
    GetLocationByIdPathParams
  >({ url: "/api/locations/{id}", method: "get", ...variables, signal });

export function getLocationByIdQuery(variables: GetLocationByIdVariables): {
  queryKey: reactQuery.QueryKey;
  queryFn: (options: QueryFnOptions) => Promise<Schemas.LocationDto>;
};

export function getLocationByIdQuery(
  variables: GetLocationByIdVariables | reactQuery.SkipToken,
): {
  queryKey: reactQuery.QueryKey;
  queryFn:
    | ((options: QueryFnOptions) => Promise<Schemas.LocationDto>)
    | reactQuery.SkipToken;
};

export function getLocationByIdQuery(
  variables: GetLocationByIdVariables | reactQuery.SkipToken,
) {
  return {
    queryKey: queryKeyFn({
      path: "/api/locations/{id}",
      operationId: "getLocationById",
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) =>
            fetchGetLocationById(variables, signal),
  };
}

export const useSuspenseGetLocationById = <TData = Schemas.LocationDto,>(
  variables: GetLocationByIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.LocationDto,
      GetLocationByIdError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBookingApiContext(options);
  return reactQuery.useSuspenseQuery<
    Schemas.LocationDto,
    GetLocationByIdError,
    TData
  >({
    ...getLocationByIdQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

export const useGetLocationById = <TData = Schemas.LocationDto,>(
  variables: GetLocationByIdVariables | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.LocationDto,
      GetLocationByIdError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useBookingApiContext(options);
  return reactQuery.useQuery<Schemas.LocationDto, GetLocationByIdError, TData>({
    ...getLocationByIdQuery(
      variables === reactQuery.skipToken
        ? variables
        : deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: "/api/locations";
      operationId: "getAllLocations";
      variables: GetAllLocationsVariables | reactQuery.SkipToken;
    }
  | {
      path: "/api/locations/{id}";
      operationId: "getLocationById";
      variables: GetLocationByIdVariables | reactQuery.SkipToken;
    };
