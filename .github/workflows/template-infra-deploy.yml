name: Infrastructure Deployment (Reusable)

on:
  workflow_call:
    inputs:
      environment_type:
        required: true
        type: string
      resource_group:
        required: true
        type: string
      pr_number:
        required: false
        type: string
        default: ''
      backend_image:
        required: true
        type: string
      frontend_image:
        required: true
        type: string

    secrets:
      azure_client_id:
        required: true
      azure_tenant_id:
        required: true
      azure_subscription_id:
        required: true
      db_password:
        required: true

    outputs:
      frontend_url:
        description: 'Frontend URL'
        value: ${{ jobs.deploy.outputs.frontend-url }}
      backend_url:
        description: 'Backend URL'
        value: ${{ jobs.deploy.outputs.backend-url }}
      frontend_pr_url:
        description: 'Frontend PR labeled URL (preview only)'
        value: ${{ jobs.deploy.outputs.frontend-pr-url }}
      backend_pr_url:
        description: 'Backend PR labeled URL (preview only)'
        value: ${{ jobs.deploy.outputs.backend-pr-url }}
      deployment_name:
        description: 'Deployment name'
        value: ${{ jobs.deploy.outputs.deployment-name }}
      deployment_hash:
        description: 'Deployment hash for finding revisions'
        value: ${{ jobs.deploy.outputs.deployment-hash }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    outputs:
      frontend-url: ${{ steps.get-urls.outputs.frontend-url }}
      backend-url: ${{ steps.get-urls.outputs.backend-url }}
      frontend-pr-url: ${{ steps.get-urls.outputs.frontend-pr-url }}
      backend-pr-url: ${{ steps.get-urls.outputs.backend-pr-url }}
      deployment-name: ${{ steps.deploy.outputs.deployment-name }}
      deployment-hash: ${{ steps.deploy.outputs.deployment-hash }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.azure_client_id }}
          tenant-id: ${{ secrets.azure_tenant_id }}
          subscription-id: ${{ secrets.azure_subscription_id }}

      - name: Remove existing PR revisions
        if: inputs.environment_type == 'preview'
        continue-on-error: true
        run: |
          NAME_PREFIX="pbooking"
          REVISION_LABEL="pr-${{ inputs.pr_number }}"

          echo "Removing existing revisions with label '${REVISION_LABEL}' for PR ${{ inputs.pr_number }}"

          # Remove existing PR label from frontend if it exists (simpler approach)
          echo "Attempting to remove label '${REVISION_LABEL}' from frontend..."
          az containerapp revision label remove \
            --resource-group ${{ inputs.resource_group }} \
            --name ${NAME_PREFIX}-frontend \
            --label ${REVISION_LABEL} \
            --yes 2>/dev/null || echo "No existing frontend label '${REVISION_LABEL}' to remove"

          # Remove existing PR label from backend if it exists (simpler approach)
          echo "Attempting to remove label '${REVISION_LABEL}' from backend..."
          az containerapp revision label remove \
            --resource-group ${{ inputs.resource_group }} \
            --name ${NAME_PREFIX}-backend \
            --label ${REVISION_LABEL} \
            --yes 2>/dev/null || echo "No existing backend label '${REVISION_LABEL}' to remove"

      - name: Deploy infrastructure
        id: deploy
        run: |
          TEMPLATE_FILE="infrastructure/azure-setup.bicep"

          # Generate deployment hash for all environments to ensure unique revisions
          DEPLOYMENT_HASH=$(date +%s | sha256sum | head -c 5)

          if [ "${{ inputs.environment_type }}" == "production" ]; then
            DEPLOYMENT_NAME="production-${DEPLOYMENT_HASH}"
          else
            DEPLOYMENT_NAME="pr-${{ inputs.pr_number }}-${DEPLOYMENT_HASH}"
          fi

          NAME_PREFIX="pbooking"

          echo "Deploying to ${{ inputs.resource_group }} as ${DEPLOYMENT_NAME}"
          echo "Backend: ${{ inputs.backend_image }}"
          echo "Frontend: ${{ inputs.frontend_image }}"
          echo "Deployment hash: ${DEPLOYMENT_HASH}"
          echo "deployment-name=${DEPLOYMENT_NAME}" >> $GITHUB_OUTPUT
          echo "deployment-hash=${DEPLOYMENT_HASH}" >> $GITHUB_OUTPUT

          # Execute the deployment with verbose logging
          set +e  # Don't exit on error, we want to capture it
          az deployment group create \
            --resource-group ${{ inputs.resource_group }} \
            --name ${DEPLOYMENT_NAME} \
            --template-file ${TEMPLATE_FILE} \
            --parameters namePrefix=${NAME_PREFIX} \
            --parameters location=swedencentral \
            --parameters environmentType=${{ inputs.environment_type }} \
            --parameters prNumber="${{ inputs.pr_number }}" \
            --parameters backendImage="${{ inputs.backend_image }}" \
            --parameters frontendImage="${{ inputs.frontend_image }}" \
            --parameters databasePassword="${{ secrets.db_password }}" \
            --parameters deploymentHash="${DEPLOYMENT_HASH}" \

          DEPLOYMENT_EXIT_CODE=$?

          if [ $DEPLOYMENT_EXIT_CODE -ne 0 ]; then
            echo "::error::Deployment failed with exit code $DEPLOYMENT_EXIT_CODE"

            echo "===== Deployment Error Details ====="
            az deployment operation group list \
              --resource-group ${{ inputs.resource_group }} \
              --name ${DEPLOYMENT_NAME} \
              --query "[?properties.provisioningState=='Failed'].{Operation: properties.targetResource.resourceName, Error: properties.statusMessage.error}" \
              --output json || true

            exit $DEPLOYMENT_EXIT_CODE
          fi

      - name: Get deployment URLs
        id: get-urls
        run: |
          DEPLOYMENT_NAME="${{ steps.deploy.outputs.deployment-name }}"

          # Get base URLs
          FRONTEND_URL=$(az deployment group show \
            --resource-group ${{ inputs.resource_group }} \
            --name ${DEPLOYMENT_NAME} \
            --query properties.outputs.frontendUrl.value -o tsv 2>/dev/null || echo "")

          BACKEND_URL=$(az deployment group show \
            --resource-group ${{ inputs.resource_group }} \
            --name ${DEPLOYMENT_NAME} \
            --query properties.outputs.backendUrl.value -o tsv 2>/dev/null || echo "")

          # Get PR-specific labeled URLs (only for preview environments)
          FRONTEND_PR_URL=$(az deployment group show \
            --resource-group ${{ inputs.resource_group }} \
            --name ${DEPLOYMENT_NAME} \
            --query properties.outputs.frontendPrUrl.value -o tsv 2>/dev/null || echo "")

          BACKEND_PR_URL=$(az deployment group show \
            --resource-group ${{ inputs.resource_group }} \
            --name ${DEPLOYMENT_NAME} \
            --query properties.outputs.backendPrUrl.value -o tsv 2>/dev/null || echo "")

          echo "Frontend URL: ${FRONTEND_URL}"
          echo "Backend URL: ${BACKEND_URL}"
          echo "Frontend PR URL: ${FRONTEND_PR_URL}"
          echo "Backend PR URL: ${BACKEND_PR_URL}"

          echo "frontend-url=${FRONTEND_URL}" >> $GITHUB_OUTPUT
          echo "backend-url=${BACKEND_URL}" >> $GITHUB_OUTPUT
          echo "frontend-pr-url=${FRONTEND_PR_URL}" >> $GITHUB_OUTPUT
          echo "backend-pr-url=${BACKEND_PR_URL}" >> $GITHUB_OUTPUT

      - name: Apply revision labels for PR environments
        if: inputs.environment_type == 'preview'
        run: |
          NAME_PREFIX="pbooking"
          REVISION_LABEL="pr-${{ inputs.pr_number }}"
          DEPLOYMENT_HASH="${{ steps.deploy.outputs.deployment-hash }}"

          echo "Applying label '${REVISION_LABEL}' to new revisions"

          # Get the latest revision names for frontend and backend
          # Query for revisions containing the deployment hash
          FRONTEND_REVISION=$(az containerapp revision list \
            --resource-group ${{ inputs.resource_group }} \
            --name ${NAME_PREFIX}-frontend \
            --query "[?contains(name, '${DEPLOYMENT_HASH}')].name | [0]" \
            -o tsv)

          BACKEND_REVISION=$(az containerapp revision list \
            --resource-group ${{ inputs.resource_group }} \
            --name ${NAME_PREFIX}-backend \
            --query "[?contains(name, '${DEPLOYMENT_HASH}')].name | [0]" \
            -o tsv)

          echo "Frontend revision: ${FRONTEND_REVISION}"
          echo "Backend revision: ${BACKEND_REVISION}"

          # Apply labels to the new revisions
          if [ -n "${FRONTEND_REVISION}" ]; then
            echo "Applying label to frontend revision ${FRONTEND_REVISION}"
            az containerapp revision label add \
              --name ${NAME_PREFIX}-frontend \
              --resource-group ${{ inputs.resource_group }} \
              --label ${REVISION_LABEL} \
              --revision ${FRONTEND_REVISION}
          else
            echo "::warning::No frontend revision found to label"
          fi

          if [ -n "${BACKEND_REVISION}" ]; then
            echo "Applying label to backend revision ${BACKEND_REVISION}"
            az containerapp revision label add \
              --name ${NAME_PREFIX}-backend \
              --resource-group ${{ inputs.resource_group }} \
              --label ${REVISION_LABEL} \
              --revision ${BACKEND_REVISION}
          else
            echo "::warning::No backend revision found to label"
          fi

      - name: Set traffic weight for labeled revisions
        if: inputs.environment_type == 'preview'
        run: |
          NAME_PREFIX="pbooking"
          REVISION_LABEL="pr-${{ inputs.pr_number }}"

          echo "Setting traffic weight for labeled revisions"

          # Set traffic to 100% for the labeled revision on frontend
          az containerapp ingress traffic set \
            --name ${NAME_PREFIX}-frontend \
            --resource-group ${{ inputs.resource_group }} \
            --label-weight ${REVISION_LABEL}=100

          # Set traffic to 100% for the labeled revision on backend
          az containerapp ingress traffic set \
            --name ${NAME_PREFIX}-backend \
            --resource-group ${{ inputs.resource_group }} \
            --label-weight ${REVISION_LABEL}=100

          echo "Traffic weight set successfully"
