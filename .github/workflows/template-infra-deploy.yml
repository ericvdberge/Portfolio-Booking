name: Infrastructure Deployment (Reusable)

on:
  workflow_call:
    inputs:
      environment_type:
        required: true
        type: string
      resource_group:
        required: true
        type: string
      pr_number:
        required: false
        type: string
        default: ''
      backend_image:
        required: true
        type: string
      frontend_image:
        required: true
        type: string

    secrets:
      azure_client_id:
        required: true
      azure_tenant_id:
        required: true
      azure_subscription_id:
        required: true
      db_password:
        required: true

    outputs:
      frontend_url:
        description: 'Frontend URL'
        value: ${{ jobs.deploy.outputs.frontend-url }}
      backend_url:
        description: 'Backend URL'
        value: ${{ jobs.deploy.outputs.backend-url }}
      frontend_pr_url:
        description: 'Frontend PR labeled URL (preview only)'
        value: ${{ jobs.deploy.outputs.frontend-pr-url }}
      backend_pr_url:
        description: 'Backend PR labeled URL (preview only)'
        value: ${{ jobs.deploy.outputs.backend-pr-url }}
      deployment_name:
        description: 'Deployment name'
        value: ${{ jobs.deploy.outputs.deployment-name }}
      deployment_hash:
        description: 'Deployment hash for finding revisions'
        value: ${{ jobs.deploy.outputs.deployment-hash }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    outputs:
      frontend-url: ${{ steps.get-urls.outputs.frontend-url }}
      backend-url: ${{ steps.get-urls.outputs.backend-url }}
      frontend-pr-url: ${{ steps.get-urls.outputs.frontend-pr-url }}
      backend-pr-url: ${{ steps.get-urls.outputs.backend-pr-url }}
      deployment-name: ${{ steps.deploy.outputs.deployment-name }}
      deployment-hash: ${{ steps.deploy.outputs.deployment-hash }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.azure_client_id }}
          tenant-id: ${{ secrets.azure_tenant_id }}
          subscription-id: ${{ secrets.azure_subscription_id }}

      - name: Remove existing PR revisions
        if: inputs.environment_type == 'preview'
        continue-on-error: true
        run: |
          NAME_PREFIX="pbooking"
          REVISION_LABEL="pr-${{ inputs.pr_number }}"

          echo "Removing existing revisions with label '${REVISION_LABEL}' for PR ${{ inputs.pr_number }}"

          # Find and remove frontend revisions with this label
          echo "Finding frontend revision with label '${REVISION_LABEL}'..."
          FRONTEND_LABELED_REVISION=$(az containerapp ingress traffic show \
            --resource-group ${{ inputs.resource_group }} \
            --name ${NAME_PREFIX}-frontend \
            --query "[?label=='${REVISION_LABEL}'].revisionName | [0]" -o tsv 2>/dev/null || echo "")

          if [ -n "${FRONTEND_LABELED_REVISION}" ]; then
            echo "Found frontend revision: ${FRONTEND_LABELED_REVISION}"

            # Remove the label first
            echo "Removing label '${REVISION_LABEL}' from frontend..."
            az containerapp revision label remove \
              --resource-group ${{ inputs.resource_group }} \
              --name ${NAME_PREFIX}-frontend \
              --label ${REVISION_LABEL} \
              --yes 2>/dev/null || echo "Could not remove label"

            # Deactivate the revision
            echo "Deactivating frontend revision: ${FRONTEND_LABELED_REVISION}"
            az containerapp revision deactivate \
              --resource-group ${{ inputs.resource_group }} \
              --name ${NAME_PREFIX}-frontend \
              --revision ${FRONTEND_LABELED_REVISION} 2>/dev/null || echo "Could not deactivate ${FRONTEND_LABELED_REVISION}"
          else
            echo "No frontend revision found with label '${REVISION_LABEL}'"
          fi

          # Find and remove backend revisions with this label
          echo "Finding backend revision with label '${REVISION_LABEL}'..."
          BACKEND_LABELED_REVISION=$(az containerapp ingress traffic show \
            --resource-group ${{ inputs.resource_group }} \
            --name ${NAME_PREFIX}-backend \
            --query "[?label=='${REVISION_LABEL}'].revisionName | [0]" -o tsv 2>/dev/null || echo "")

          if [ -n "${BACKEND_LABELED_REVISION}" ]; then
            echo "Found backend revision: ${BACKEND_LABELED_REVISION}"

            # Remove the label first
            echo "Removing label '${REVISION_LABEL}' from backend..."
            az containerapp revision label remove \
              --resource-group ${{ inputs.resource_group }} \
              --name ${NAME_PREFIX}-backend \
              --label ${REVISION_LABEL} \
              --yes 2>/dev/null || echo "Could not remove label"

            # Deactivate the revision
            echo "Deactivating backend revision: ${BACKEND_LABELED_REVISION}"
            az containerapp revision deactivate \
              --resource-group ${{ inputs.resource_group }} \
              --name ${NAME_PREFIX}-backend \
              --revision ${BACKEND_LABELED_REVISION} 2>/dev/null || echo "Could not deactivate ${BACKEND_LABELED_REVISION}"
          else
            echo "No backend revision found with label '${REVISION_LABEL}'"
          fi

      - name: Check if infrastructure exists
        id: check-infra
        run: |
          NAME_PREFIX="pbooking"

          # Check if Container Apps exist
          FRONTEND_EXISTS=$(az containerapp show \
            --name ${NAME_PREFIX}-frontend \
            --resource-group ${{ inputs.resource_group }} \
            --query "name" -o tsv 2>/dev/null || echo "")

          BACKEND_EXISTS=$(az containerapp show \
            --name ${NAME_PREFIX}-backend \
            --resource-group ${{ inputs.resource_group }} \
            --query "name" -o tsv 2>/dev/null || echo "")

          if [ -n "${FRONTEND_EXISTS}" ] && [ -n "${BACKEND_EXISTS}" ]; then
            echo "Infrastructure already exists. Will deploy new revision only."
            echo "infra-exists=true" >> $GITHUB_OUTPUT
          else
            echo "Infrastructure does not exist. Will run Bicep deployment."
            echo "infra-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy infrastructure (first time only)
        id: deploy-infra
        if: steps.check-infra.outputs.infra-exists == 'false'
        run: |
          TEMPLATE_FILE="infrastructure/azure-setup.bicep"
          DEPLOYMENT_HASH=$(date +%s | sha256sum | head -c 5)

          if [ "${{ inputs.environment_type }}" == "production" ]; then
            DEPLOYMENT_NAME="production-${DEPLOYMENT_HASH}"
          else
            DEPLOYMENT_NAME="pr-${{ inputs.pr_number }}-${DEPLOYMENT_HASH}"
          fi

          NAME_PREFIX="pbooking"

          echo "Deploying infrastructure to ${{ inputs.resource_group }}"
          echo "deployment-name=${DEPLOYMENT_NAME}" >> $GITHUB_OUTPUT
          echo "deployment-hash=${DEPLOYMENT_HASH}" >> $GITHUB_OUTPUT

          az deployment group create \
            --resource-group ${{ inputs.resource_group }} \
            --name ${DEPLOYMENT_NAME} \
            --template-file ${TEMPLATE_FILE} \
            --parameters namePrefix=${NAME_PREFIX} \
            --parameters location=swedencentral \
            --parameters environmentType=${{ inputs.environment_type }} \
            --parameters prNumber="${{ inputs.pr_number }}" \
            --parameters backendImage="${{ inputs.backend_image }}" \
            --parameters frontendImage="${{ inputs.frontend_image }}" \
            --parameters databasePassword="${{ secrets.db_password }}" \
            --parameters deploymentHash="${DEPLOYMENT_HASH}"

      - name: Deploy new revision (infrastructure exists)
        id: deploy-revision
        if: steps.check-infra.outputs.infra-exists == 'true'
        run: |
          NAME_PREFIX="pbooking"
          DEPLOYMENT_HASH=$(date +%s | sha256sum | head -c 5)
          REVISION_SUFFIX="${DEPLOYMENT_HASH}"

          if [ "${{ inputs.environment_type }}" == "production" ]; then
            DEPLOYMENT_NAME="production-${DEPLOYMENT_HASH}"
          else
            DEPLOYMENT_NAME="pr-${{ inputs.pr_number }}-${DEPLOYMENT_HASH}"
          fi

          echo "Deploying new revision with suffix: ${REVISION_SUFFIX}"
          echo "Backend: ${{ inputs.backend_image }}"
          echo "Frontend: ${{ inputs.frontend_image }}"
          echo "deployment-name=${DEPLOYMENT_NAME}" >> $GITHUB_OUTPUT
          echo "deployment-hash=${DEPLOYMENT_HASH}" >> $GITHUB_OUTPUT

          # Deploy backend revision and capture the revision name
          echo "Deploying backend revision..."
          BACKEND_UPDATE_OUTPUT=$(az containerapp update \
            --name ${NAME_PREFIX}-backend \
            --resource-group ${{ inputs.resource_group }} \
            --image "${{ inputs.backend_image }}" \
            --revision-suffix "${REVISION_SUFFIX}" \
            --set-env-vars "ASPNETCORE_ENVIRONMENT=Production" \
            --output json)

          # Extract the latest revision name from the update output
          BACKEND_REVISION=$(echo "$BACKEND_UPDATE_OUTPUT" | jq -r '.properties.latestRevisionName')
          echo "Backend revision created: ${BACKEND_REVISION}"
          echo "backend-revision=${BACKEND_REVISION}" >> $GITHUB_OUTPUT

          # Deploy frontend revision
          echo "Deploying frontend revision..."

          # Get backend FQDN for frontend env var
          BACKEND_FQDN=$(az containerapp show \
            --name ${NAME_PREFIX}-backend \
            --resource-group ${{ inputs.resource_group }} \
            --query "properties.configuration.ingress.fqdn" -o tsv)

          if [ "${{ inputs.environment_type }}" == "preview" ]; then
            # For preview, use labeled URL
            REVISION_LABEL="pr-${{ inputs.pr_number }}"
            BACKEND_DOMAIN=$(echo "${BACKEND_FQDN}" | cut -d'.' -f2-)
            API_URL="https://${NAME_PREFIX}-backend---${REVISION_LABEL}.${BACKEND_DOMAIN}"
          else
            API_URL="https://${BACKEND_FQDN}"
          fi

          FRONTEND_UPDATE_OUTPUT=$(az containerapp update \
            --name ${NAME_PREFIX}-frontend \
            --resource-group ${{ inputs.resource_group }} \
            --image "${{ inputs.frontend_image }}" \
            --revision-suffix "${REVISION_SUFFIX}" \
            --set-env-vars "NEXT_PUBLIC_API_URL=${API_URL}" \
            --output json)

          FRONTEND_REVISION=$(echo "$FRONTEND_UPDATE_OUTPUT" | jq -r '.properties.latestRevisionName')
          echo "Frontend revision created: ${FRONTEND_REVISION}"
          echo "frontend-revision=${FRONTEND_REVISION}" >> $GITHUB_OUTPUT

          echo "Revisions deployed successfully"

      - name: Set deployment outputs
        id: deploy
        run: |
          # Consolidate outputs from either deploy path
          if [ "${{ steps.check-infra.outputs.infra-exists }}" == "true" ]; then
            echo "deployment-name=${{ steps.deploy-revision.outputs.deployment-name }}" >> $GITHUB_OUTPUT
            echo "deployment-hash=${{ steps.deploy-revision.outputs.deployment-hash }}" >> $GITHUB_OUTPUT
          else
            echo "deployment-name=${{ steps.deploy-infra.outputs.deployment-name }}" >> $GITHUB_OUTPUT
            echo "deployment-hash=${{ steps.deploy-infra.outputs.deployment-hash }}" >> $GITHUB_OUTPUT
          fi

      - name: Get deployment URLs
        id: get-urls
        run: |
          NAME_PREFIX="pbooking"

          # Get base URLs from Container Apps (works for both Bicep and update paths)
          FRONTEND_FQDN=$(az containerapp show \
            --name ${NAME_PREFIX}-frontend \
            --resource-group ${{ inputs.resource_group }} \
            --query "properties.configuration.ingress.fqdn" -o tsv)

          BACKEND_FQDN=$(az containerapp show \
            --name ${NAME_PREFIX}-backend \
            --resource-group ${{ inputs.resource_group }} \
            --query "properties.configuration.ingress.fqdn" -o tsv)

          FRONTEND_URL="https://${FRONTEND_FQDN}"
          BACKEND_URL="https://${BACKEND_FQDN}"

          # Construct PR-specific labeled URLs (only for preview environments)
          if [ "${{ inputs.environment_type }}" == "preview" ]; then
            REVISION_LABEL="pr-${{ inputs.pr_number }}"
            BACKEND_DOMAIN=$(echo "${BACKEND_FQDN}" | cut -d'.' -f2-)
            FRONTEND_DOMAIN=$(echo "${FRONTEND_FQDN}" | cut -d'.' -f2-)

            FRONTEND_PR_URL="https://${NAME_PREFIX}-frontend---${REVISION_LABEL}.${FRONTEND_DOMAIN}"
            BACKEND_PR_URL="https://${NAME_PREFIX}-backend---${REVISION_LABEL}.${BACKEND_DOMAIN}"
          else
            FRONTEND_PR_URL=""
            BACKEND_PR_URL=""
          fi

          echo "Frontend URL: ${FRONTEND_URL}"
          echo "Backend URL: ${BACKEND_URL}"
          echo "Frontend PR URL: ${FRONTEND_PR_URL}"
          echo "Backend PR URL: ${BACKEND_PR_URL}"

          echo "frontend-url=${FRONTEND_URL}" >> $GITHUB_OUTPUT
          echo "backend-url=${BACKEND_URL}" >> $GITHUB_OUTPUT
          echo "frontend-pr-url=${FRONTEND_PR_URL}" >> $GITHUB_OUTPUT
          echo "backend-pr-url=${BACKEND_PR_URL}" >> $GITHUB_OUTPUT

      - name: Apply PR label to new revision
        if: inputs.environment_type == 'preview'
        run: |
          NAME_PREFIX="pbooking"
          REVISION_LABEL="pr-${{ inputs.pr_number }}"
          DEPLOYMENT_HASH="${{ steps.deploy.outputs.deployment-hash }}"

          echo "Applying label '${REVISION_LABEL}' to newly deployed revision"

          # Determine which step deployed (Bicep or update)
          if [ "${{ steps.check-infra.outputs.infra-exists }}" == "true" ]; then
            # Revisions were created via az containerapp update
            FRONTEND_REVISION="${{ steps.deploy-revision.outputs.frontend-revision }}"
            BACKEND_REVISION="${{ steps.deploy-revision.outputs.backend-revision }}"
          else
            # Revisions were created via Bicep, need to find them
            FRONTEND_REVISION=$(az containerapp revision list \
              --resource-group ${{ inputs.resource_group }} \
              --name ${NAME_PREFIX}-frontend \
              --query "[?properties.template.revisionSuffix=='${DEPLOYMENT_HASH}'].name | [0]" \
              -o tsv)

            BACKEND_REVISION=$(az containerapp revision list \
              --resource-group ${{ inputs.resource_group }} \
              --name ${NAME_PREFIX}-backend \
              --query "[?properties.template.revisionSuffix=='${DEPLOYMENT_HASH}'].name | [0]" \
              -o tsv)
          fi

          echo "Frontend revision: ${FRONTEND_REVISION}"
          echo "Backend revision: ${BACKEND_REVISION}"

          if [ -n "${FRONTEND_REVISION}" ] && [ "${FRONTEND_REVISION}" != "null" ]; then
            echo "Applying label to frontend revision: ${FRONTEND_REVISION}"
            az containerapp revision label add \
              --name ${NAME_PREFIX}-frontend \
              --resource-group ${{ inputs.resource_group }} \
              --label "${REVISION_LABEL}" \
              --revision "${FRONTEND_REVISION}" \
              --yes
          else
            echo "::error::Frontend revision not found"
            exit 1
          fi

          if [ -n "${BACKEND_REVISION}" ] && [ "${BACKEND_REVISION}" != "null" ]; then
            echo "Applying label to backend revision: ${BACKEND_REVISION}"
            az containerapp revision label add \
              --name ${NAME_PREFIX}-backend \
              --resource-group ${{ inputs.resource_group }} \
              --label "${REVISION_LABEL}" \
              --revision "${BACKEND_REVISION}" \
              --yes
          else
            echo "::error::Backend revision not found"
            exit 1
          fi

          echo "✓ Label '${REVISION_LABEL}' applied successfully"

      - name: Verify labeled revisions
        if: inputs.environment_type == 'preview'
        run: |
          NAME_PREFIX="pbooking"
          REVISION_LABEL="pr-${{ inputs.pr_number }}"

          echo "Verifying labeled revisions are accessible"

          # Verify frontend label
          FRONTEND_LABEL=$(az containerapp ingress traffic show \
            --resource-group ${{ inputs.resource_group }} \
            --name ${NAME_PREFIX}-frontend \
            --query "[?label=='${REVISION_LABEL}'].revisionName | [0]" -o tsv 2>/dev/null || echo "")

          if [ -n "${FRONTEND_LABEL}" ]; then
            echo "✓ Frontend label '${REVISION_LABEL}' is active on revision ${FRONTEND_LABEL}"
          else
            echo "::warning::Frontend label '${REVISION_LABEL}' not found"
          fi

          # Verify backend label
          BACKEND_LABEL=$(az containerapp ingress traffic show \
            --resource-group ${{ inputs.resource_group }} \
            --name ${NAME_PREFIX}-backend \
            --query "[?label=='${REVISION_LABEL}'].revisionName | [0]" -o tsv 2>/dev/null || echo "")

          if [ -n "${BACKEND_LABEL}" ]; then
            echo "✓ Backend label '${REVISION_LABEL}' is active on revision ${BACKEND_LABEL}"
          else
            echo "::warning::Backend label '${REVISION_LABEL}' not found"
          fi

          echo "Label verification complete. Labels provide direct URL access without traffic weight allocation."
