name: Infrastructure Deployment (Reusable)

on:
  workflow_call:
    inputs:
      environment_type:
        required: true
        type: string
      resource_group:
        required: true
        type: string
      pr_number:
        required: false
        type: string
        default: ''
      backend_image:
        required: true
        type: string
      frontend_image:
        required: true
        type: string

    secrets:
      azure_client_id:
        required: true
      azure_tenant_id:
        required: true
      azure_subscription_id:
        required: true
      db_password:
        required: true

    outputs:
      frontend_url:
        description: 'Frontend URL'
        value: ${{ jobs.deploy.outputs.frontend-url }}
      backend_url:
        description: 'Backend URL'
        value: ${{ jobs.deploy.outputs.backend-url }}
      frontend_pr_url:
        description: 'Frontend PR labeled URL (preview only)'
        value: ${{ jobs.deploy.outputs.frontend-pr-url }}
      backend_pr_url:
        description: 'Backend PR labeled URL (preview only)'
        value: ${{ jobs.deploy.outputs.backend-pr-url }}
      deployment_name:
        description: 'Deployment name'
        value: ${{ jobs.deploy.outputs.deployment-name }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    outputs:
      frontend-url: ${{ steps.get-urls.outputs.frontend-url }}
      backend-url: ${{ steps.get-urls.outputs.backend-url }}
      frontend-pr-url: ${{ steps.get-labeled-urls.outputs.frontend-pr-url || steps.get-urls.outputs.frontend-pr-url }}
      backend-pr-url: ${{ steps.get-labeled-urls.outputs.backend-pr-url || steps.get-urls.outputs.backend-pr-url }}
      deployment-name: ${{ steps.deploy.outputs.deployment-name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.azure_client_id }}
          tenant-id: ${{ secrets.azure_tenant_id }}
          subscription-id: ${{ secrets.azure_subscription_id }}

      - name: Delete existing PR revisions
        if: inputs.environment_type == 'preview'
        continue-on-error: true
        run: |
          REVISION_SUFFIX="pr-${{ inputs.pr_number }}"
          NAME_PREFIX="pbooking"

          echo "Checking for existing revisions with suffix: ${REVISION_SUFFIX}"

          # Deactivate frontend revision if exists
          FRONTEND_REVISIONS=$(az containerapp revision list \
            --resource-group ${{ inputs.resource_group }} \
            --name ${NAME_PREFIX}-frontend \
            --query "[?ends_with(name, '-${REVISION_SUFFIX}')].name" -o tsv 2>/dev/null || true)

          if [ -n "$FRONTEND_REVISIONS" ]; then
            echo "Deactivating frontend revisions: $FRONTEND_REVISIONS"
            echo "$FRONTEND_REVISIONS" | while read revision; do
              az containerapp revision deactivate \
                --resource-group ${{ inputs.resource_group }} \
                --name ${NAME_PREFIX}-frontend \
                --revision "$revision"
            done
          else
            echo "No frontend revisions found"
          fi

          # Deactivate backend revision if exists
          BACKEND_REVISIONS=$(az containerapp revision list \
            --resource-group ${{ inputs.resource_group }} \
            --name ${NAME_PREFIX}-backend \
            --query "[?ends_with(name, '-${REVISION_SUFFIX}')].name" -o tsv 2>/dev/null || true)

          if [ -n "$BACKEND_REVISIONS" ]; then
            echo "Deactivating backend revisions: $BACKEND_REVISIONS"
            echo "$BACKEND_REVISIONS" | while read revision; do
              az containerapp revision deactivate \
                --resource-group ${{ inputs.resource_group }} \
                --name ${NAME_PREFIX}-backend \
                --revision "$revision"
            done
          else
            echo "No backend revisions found"
          fi

          # Deactivate database revision if exists
          DATABASE_REVISIONS=$(az containerapp revision list \
            --resource-group ${{ inputs.resource_group }} \
            --name ${NAME_PREFIX}-database \
            --query "[?ends_with(name, '-${REVISION_SUFFIX}')].name" -o tsv 2>/dev/null || true)

          if [ -n "$DATABASE_REVISIONS" ]; then
            echo "Deactivating database revisions: $DATABASE_REVISIONS"
            echo "$DATABASE_REVISIONS" | while read revision; do
              az containerapp revision deactivate \
                --resource-group ${{ inputs.resource_group }} \
                --name ${NAME_PREFIX}-database \
                --revision "$revision"
            done
          else
            echo "No database revisions found"
          fi

      - name: Deploy infrastructure
        id: deploy
        run: |
          TEMPLATE_FILE="infrastructure/azure-setup.bicep"

          if [ "${{ inputs.environment_type }}" == "production" ]; then
            DEPLOYMENT_HASH=$(date +%s | sha256sum | head -c 5)
            DEPLOYMENT_NAME="production-${DEPLOYMENT_HASH}"
          else
            DEPLOYMENT_NAME="pr-${{ inputs.pr_number }}"
            DEPLOYMENT_HASH=""
          fi

          NAME_PREFIX="pbooking"

          echo "Deploying to ${{ inputs.resource_group }} as ${DEPLOYMENT_NAME}"
          echo "Backend: ${{ inputs.backend_image }}"
          echo "Frontend: ${{ inputs.frontend_image }}"
          echo "deployment-name=${DEPLOYMENT_NAME}" >> $GITHUB_OUTPUT

          # Execute the deployment with verbose logging
          set +e  # Don't exit on error, we want to capture it
          az deployment group create \
            --resource-group ${{ inputs.resource_group }} \
            --name ${DEPLOYMENT_NAME} \
            --template-file ${TEMPLATE_FILE} \
            --parameters namePrefix=${NAME_PREFIX} \
            --parameters location=swedencentral \
            --parameters environmentType=${{ inputs.environment_type }} \
            --parameters prNumber="${{ inputs.pr_number }}" \
            --parameters backendImage="${{ inputs.backend_image }}" \
            --parameters frontendImage="${{ inputs.frontend_image }}" \
            --parameters databasePassword="${{ secrets.db_password }}" \
            --parameters deploymentHash="${DEPLOYMENT_HASH}" \
            --verbose

          DEPLOYMENT_EXIT_CODE=$?

          if [ $DEPLOYMENT_EXIT_CODE -ne 0 ]; then
            echo "::error::Deployment failed with exit code $DEPLOYMENT_EXIT_CODE"

            echo "===== Deployment Error Details ====="
            az deployment operation group list \
              --resource-group ${{ inputs.resource_group }} \
              --name ${DEPLOYMENT_NAME} \
              --query "[?properties.provisioningState=='Failed'].{Operation: properties.targetResource.resourceName, Error: properties.statusMessage.error}" \
              --output json || true

            exit $DEPLOYMENT_EXIT_CODE
          fi

      - name: Get deployment URLs
        id: get-urls
        run: |
          DEPLOYMENT_NAME="${{ steps.deploy.outputs.deployment-name }}"

          # For all environments, get URLs from deployment outputs
          FRONTEND_URL=$(az deployment group show \
            --resource-group ${{ inputs.resource_group }} \
            --name ${DEPLOYMENT_NAME} \
            --query properties.outputs.frontendUrl.value -o tsv)

          BACKEND_URL=$(az deployment group show \
            --resource-group ${{ inputs.resource_group }} \
            --name ${DEPLOYMENT_NAME} \
            --query properties.outputs.backendUrl.value -o tsv)

          # Get PR-specific labeled URLs (only for preview environments)
          FRONTEND_PR_URL=$(az deployment group show \
            --resource-group ${{ inputs.resource_group }} \
            --name ${DEPLOYMENT_NAME} \
            --query properties.outputs.frontendPrUrl.value -o tsv 2>/dev/null || echo "")

          BACKEND_PR_URL=$(az deployment group show \
            --resource-group ${{ inputs.resource_group }} \
            --name ${DEPLOYMENT_NAME} \
            --query properties.outputs.backendPrUrl.value -o tsv 2>/dev/null || echo "")

          echo "Frontend: ${FRONTEND_URL}"
          echo "Backend: ${BACKEND_URL}"
          echo "Frontend PR: ${FRONTEND_PR_URL}"
          echo "Backend PR: ${BACKEND_PR_URL}"

          echo "frontend-url=${FRONTEND_URL}" >> $GITHUB_OUTPUT
          echo "backend-url=${BACKEND_URL}" >> $GITHUB_OUTPUT
          echo "frontend-pr-url=${FRONTEND_PR_URL}" >> $GITHUB_OUTPUT
          echo "backend-pr-url=${BACKEND_PR_URL}" >> $GITHUB_OUTPUT

      - name: Apply revision labels for PR environments
        if: inputs.environment_type == 'preview'
        run: |
          NAME_PREFIX="pbooking"
          REVISION_SUFFIX="pr-${{ inputs.pr_number }}"
          REVISION_LABEL="pr-${{ inputs.pr_number }}"

          echo "Applying revision labels for PR ${{ inputs.pr_number }}"

          # Apply label to frontend revision
          FRONTEND_REVISION=$(az containerapp revision list \
            --resource-group ${{ inputs.resource_group }} \
            --name ${NAME_PREFIX}-frontend \
            --query "[?ends_with(name, '-${REVISION_SUFFIX}')].name" -o tsv | head -1)

          if [ -n "$FRONTEND_REVISION" ]; then
            echo "Applying label '${REVISION_LABEL}' to frontend revision: $FRONTEND_REVISION"
            az containerapp revision label add \
              --resource-group ${{ inputs.resource_group }} \
              --name ${NAME_PREFIX}-frontend \
              --revision "$FRONTEND_REVISION" \
              --label "$REVISION_LABEL"
          fi

          # Apply label to backend revision
          BACKEND_REVISION=$(az containerapp revision list \
            --resource-group ${{ inputs.resource_group }} \
            --name ${NAME_PREFIX}-backend \
            --query "[?ends_with(name, '-${REVISION_SUFFIX}')].name" -o tsv | head -1)

          if [ -n "$BACKEND_REVISION" ]; then
            echo "Applying label '${REVISION_LABEL}' to backend revision: $BACKEND_REVISION"
            az containerapp revision label add \
              --resource-group ${{ inputs.resource_group }} \
              --name ${NAME_PREFIX}-backend \
              --revision "$BACKEND_REVISION" \
              --label "$REVISION_LABEL"
          fi

      - name: Get labeled URLs after applying labels
        if: inputs.environment_type == 'preview'
        id: get-labeled-urls
        run: |
          NAME_PREFIX="pbooking"
          REVISION_LABEL="pr-${{ inputs.pr_number }}"

          # Get the FQDN for each app
          FRONTEND_FQDN=$(az containerapp show \
            --resource-group ${{ inputs.resource_group }} \
            --name ${NAME_PREFIX}-frontend \
            --query properties.configuration.ingress.fqdn -o tsv)

          BACKEND_FQDN=$(az containerapp show \
            --resource-group ${{ inputs.resource_group }} \
            --name ${NAME_PREFIX}-backend \
            --query properties.configuration.ingress.fqdn -o tsv)

          # Construct labeled URLs
          FRONTEND_LABELED_URL="https://${REVISION_LABEL}---${FRONTEND_FQDN}"
          BACKEND_LABELED_URL="https://${REVISION_LABEL}---${BACKEND_FQDN}"

          echo "Frontend labeled URL: ${FRONTEND_LABELED_URL}"
          echo "Backend labeled URL: ${BACKEND_LABELED_URL}"

          # Update the outputs with actual labeled URLs
          echo "frontend-pr-url=${FRONTEND_LABELED_URL}" >> $GITHUB_OUTPUT
          echo "backend-pr-url=${BACKEND_LABELED_URL}" >> $GITHUB_OUTPUT
