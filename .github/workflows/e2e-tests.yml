name: E2E Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'e2e/**'
      - '.github/workflows/e2e-tests.yml'

jobs:
  e2e-tests:
    name: Run E2E Tests on PR Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install e2e dependencies
        working-directory: ./e2e
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        working-directory: ./e2e
        run: pnpm exec playwright install --with-deps chromium

      - name: Wait for PR deployment
        id: wait-deployment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "Waiting for PR deployment to complete..."

          # Wait up to 10 minutes for deployment workflow to complete and get the run ID
          RUN_ID=""
          timeout 600 bash -c '
            while true; do
              # Get the latest deployment workflow run for this PR
              WORKFLOW_DATA=$(gh run list \
                --workflow="pr-deploy.yml" \
                --json status,conclusion,headBranch,databaseId \
                --jq "map(select(.headBranch == \"${{ github.head_ref }}\")) | .[0]")

              echo "Workflow data: $WORKFLOW_DATA"

              STATUS=$(echo "$WORKFLOW_DATA" | jq -r ".status")
              CONCLUSION=$(echo "$WORKFLOW_DATA" | jq -r ".conclusion")
              RUN_ID=$(echo "$WORKFLOW_DATA" | jq -r ".databaseId")

              echo "Run ID: $RUN_ID, Status: $STATUS, Conclusion: $CONCLUSION"

              if [ "$STATUS" = "completed" ]; then
                if [ "$CONCLUSION" = "success" ]; then
                  echo "Deployment completed successfully!"
                  echo "$RUN_ID" > /tmp/run_id.txt
                  break
                else
                  echo "Deployment failed with conclusion: $CONCLUSION"
                  exit 1
                fi
              fi

              echo "Waiting for deployment... (status: $STATUS)"
              sleep 15
            done
          ' || {
            echo "Timeout or error waiting for deployment"
            exit 1
          }

          RUN_ID=$(cat /tmp/run_id.txt)
          echo "Using deployment run ID: $RUN_ID"

          # Get the PR comment with deployment URLs
          sleep 10  # Give time for comment to be posted
          COMMENT=$(gh pr view ${{ github.event.pull_request.number }} --json comments --jq '.comments[] | select(.body | contains("Preview Deployment Ready")) | .body' | tail -n 1)

          echo "Deployment comment: $COMMENT"

          # Extract URLs from the comment
          FRONTEND_URL=$(echo "$COMMENT" | grep -oP 'Frontend\*\*: \K[^\s]+' || echo "")
          BACKEND_URL=$(echo "$COMMENT" | grep -oP 'Backend\*\*: \K[^\s]+' || echo "")

          if [ -z "$FRONTEND_URL" ]; then
            echo "Failed to extract frontend URL from PR comment"
            exit 1
          fi

          echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "backend_url=$BACKEND_URL" >> $GITHUB_OUTPUT

          echo "Frontend URL: $FRONTEND_URL"
          echo "Backend URL: $BACKEND_URL"

      - name: Run Playwright tests
        working-directory: ./e2e
        env:
          BASE_URL: ${{ steps.wait-deployment.outputs.frontend_url }}
        run: pnpm exec playwright test --project=chromium

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-pr-${{ github.event.pull_request.number }}
          path: e2e/playwright-report/
          retention-days: 30

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-pr-${{ github.event.pull_request.number }}
          path: e2e/test-results/
          retention-days: 30

      - name: Comment test results on PR
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FRONTEND_URL: ${{ steps.wait-deployment.outputs.frontend_url }}
        run: |
          # Count test results from playwright report
          if [ -f e2e/test-results/junit.xml ]; then
            TESTS_TOTAL=$(grep -oP 'tests="\K[0-9]+' e2e/test-results/junit.xml || echo "0")
            TESTS_FAILED=$(grep -oP 'failures="\K[0-9]+' e2e/test-results/junit.xml || echo "0")
            TESTS_PASSED=$((TESTS_TOTAL - TESTS_FAILED))

            if [ "$TESTS_FAILED" = "0" ]; then
              STATUS="‚úÖ E2E Tests Passed"
              EMOJI="üéâ"
            else
              STATUS="‚ùå E2E Tests Failed"
              EMOJI="‚ö†Ô∏è"
            fi

            gh pr comment ${{ github.event.pull_request.number }} --body "${EMOJI} **${STATUS}**

            **Test Results:**
            - ‚úÖ Passed: ${TESTS_PASSED}
            - ‚ùå Failed: ${TESTS_FAILED}
            - üìä Total: ${TESTS_TOTAL}

            **Environment:**
            - Frontend: ${FRONTEND_URL}

            [View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          else
            gh pr comment ${{ github.event.pull_request.number }} --body "‚ö†Ô∏è **E2E Tests Issue**

            Could not find test results.

            [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          fi
