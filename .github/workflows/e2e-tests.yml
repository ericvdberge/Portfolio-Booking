name: E2E Tests

on:
  pull_request:
    branches: [main]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'e2e/**'
      - 'docker-compose.yml'
      - '.github/workflows/e2e-tests.yml'
  push:
    branches: [main]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'e2e/**'
      - 'docker-compose.yml'
      - '.github/workflows/e2e-tests.yml'

jobs:
  e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            e2e/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./e2e
        run: |
          npm ci
          npx playwright install --with-deps chromium

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Start application services
        run: |
          # Start PostgreSQL in background
          docker compose up -d postgres

          # Wait for PostgreSQL to be healthy
          timeout 60 bash -c 'until docker compose exec -T postgres pg_isready -U booking_user -d portfolio_booking; do sleep 2; done'

      - name: Build and start backend
        working-directory: ./backend
        run: |
          # Restore and build backend
          dotnet restore booking.sln
          dotnet build booking.sln --no-restore --configuration Release

          # Run migrations
          dotnet ef database update --project Booking.Infrastructure --startup-project Booking.Api

          # Start backend in background
          nohup dotnet run --project Booking.Api --no-build --configuration Release > backend.log 2>&1 &

          # Wait for backend to be ready
          timeout 60 bash -c 'until curl -f http://localhost:8080/health || curl -f http://localhost:8080; do sleep 2; done' || {
            echo "Backend failed to start. Logs:"
            cat backend.log
            exit 1
          }

      - name: Build and start frontend
        working-directory: ./frontend
        run: |
          # Build frontend
          npm run build

          # Start frontend in background
          nohup npm start > frontend.log 2>&1 &

          # Wait for frontend to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done' || {
            echo "Frontend failed to start. Logs:"
            cat frontend.log
            exit 1
          }

      - name: Run Playwright tests
        working-directory: ./e2e
        env:
          BASE_URL: http://localhost:3000
        run: npx playwright test --project=chromium

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: e2e/playwright-report/
          retention-days: 30

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: e2e/test-results/
          retention-days: 30

      - name: Show logs on failure
        if: failure()
        run: |
          echo "=== Backend Logs ==="
          cat backend/backend.log || echo "No backend logs found"
          echo ""
          echo "=== Frontend Logs ==="
          cat frontend/frontend.log || echo "No frontend logs found"
          echo ""
          echo "=== Docker Logs ==="
          docker compose logs postgres

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v
          pkill -f "dotnet run" || true
          pkill -f "next start" || true
