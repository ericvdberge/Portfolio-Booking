name: Update Container Images (Reusable)

on:
  workflow_call:
    inputs:
      environment_type:
        required: true
        type: string
      resource_group:
        required: true
        type: string
      pr_number:
        required: false
        type: string
        default: ''
      backend_image:
        required: true
        type: string
      frontend_image:
        required: true
        type: string

    secrets:
      azure_client_id:
        required: true
      azure_tenant_id:
        required: true
      azure_subscription_id:
        required: true

    outputs:
      frontend_url:
        description: 'Frontend URL'
        value: ${{ jobs.update.outputs.frontend-url }}
      backend_url:
        description: 'Backend URL'
        value: ${{ jobs.update.outputs.backend-url }}

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    outputs:
      frontend-url: ${{ steps.get-urls.outputs.frontend-url }}
      backend-url: ${{ steps.get-urls.outputs.backend-url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.azure_client_id }}
          tenant-id: ${{ secrets.azure_tenant_id }}
          subscription-id: ${{ secrets.azure_subscription_id }}

      - name: Update backend container app
        id: update-backend
        run: |
          NAME_PREFIX="pbooking"
          REVISION_LABEL="pr-${{ inputs.pr_number }}"

          echo "Updating backend container app for label: ${REVISION_LABEL}"
          echo "Backend image: ${{ inputs.backend_image }}"

          # Get the revision associated with this label
          LABELED_REVISION=$(az containerapp revision list \
            --resource-group ${{ inputs.resource_group }} \
            --name ${NAME_PREFIX}-backend \
            --query "[?label=='${REVISION_LABEL}'].name" -o tsv | head -n 1)

          if [ -n "$LABELED_REVISION" ]; then
            echo "Found revision with label ${REVISION_LABEL}: ${LABELED_REVISION}"

            # Create a new revision with the updated image, copying from the labeled revision
            echo "Creating new revision with image: ${{ inputs.backend_image }}"
            az containerapp revision copy \
              --name ${NAME_PREFIX}-backend \
              --resource-group ${{ inputs.resource_group }} \
              --from-revision ${LABELED_REVISION} \
              --image "${{ inputs.backend_image }}"

            # Get the newly created revision
            NEW_REVISION=$(az containerapp revision list \
              --resource-group ${{ inputs.resource_group }} \
              --name ${NAME_PREFIX}-backend \
              --query "[0].name" -o tsv)

            echo "New revision created: ${NEW_REVISION}"

            # Apply the PR label to the new revision (this removes it from the old one)
            echo "Moving label ${REVISION_LABEL} to new revision"
            az containerapp revision label add \
              --name ${NAME_PREFIX}-backend \
              --resource-group ${{ inputs.resource_group }} \
              --label ${REVISION_LABEL} \
              --revision ${NEW_REVISION}

            # Set traffic weight for the labeled revision
            echo "Setting traffic weight for labeled revision"
            az containerapp ingress traffic set \
              --name ${NAME_PREFIX}-backend \
              --resource-group ${{ inputs.resource_group }} \
              --label-weight ${REVISION_LABEL}=100

            echo "Backend updated successfully"
          else
            echo "::warning::No revision found with label ${REVISION_LABEL}"
            echo "This might be the first deployment for this PR"
          fi

          echo "revision-label=${REVISION_LABEL}" >> $GITHUB_OUTPUT

      - name: Update frontend container app
        id: update-frontend
        run: |
          NAME_PREFIX="pbooking"
          REVISION_LABEL="pr-${{ inputs.pr_number }}"

          echo "Updating frontend container app for label: ${REVISION_LABEL}"
          echo "Frontend image: ${{ inputs.frontend_image }}"

          # Get the revision associated with this label
          LABELED_REVISION=$(az containerapp revision list \
            --resource-group ${{ inputs.resource_group }} \
            --name ${NAME_PREFIX}-frontend \
            --query "[?label=='${REVISION_LABEL}'].name" -o tsv | head -n 1)

          if [ -n "$LABELED_REVISION" ]; then
            echo "Found revision with label ${REVISION_LABEL}: ${LABELED_REVISION}"

            # Create a new revision with the updated image, copying from the labeled revision
            echo "Creating new revision with image: ${{ inputs.frontend_image }}"
            az containerapp revision copy \
              --name ${NAME_PREFIX}-frontend \
              --resource-group ${{ inputs.resource_group }} \
              --from-revision ${LABELED_REVISION} \
              --image "${{ inputs.frontend_image }}"

            # Get the newly created revision
            NEW_REVISION=$(az containerapp revision list \
              --resource-group ${{ inputs.resource_group }} \
              --name ${NAME_PREFIX}-frontend \
              --query "[0].name" -o tsv)

            echo "New revision created: ${NEW_REVISION}"

            # Apply the PR label to the new revision (this removes it from the old one)
            echo "Moving label ${REVISION_LABEL} to new revision"
            az containerapp revision label add \
              --name ${NAME_PREFIX}-frontend \
              --resource-group ${{ inputs.resource_group }} \
              --label ${REVISION_LABEL} \
              --revision ${NEW_REVISION}

            # Set traffic weight for the labeled revision
            echo "Setting traffic weight for labeled revision"
            az containerapp ingress traffic set \
              --name ${NAME_PREFIX}-frontend \
              --resource-group ${{ inputs.resource_group }} \
              --label-weight ${REVISION_LABEL}=100

            echo "Frontend updated successfully"
          else
            echo "::warning::No revision found with label ${REVISION_LABEL}"
            echo "This might be the first deployment for this PR"
          fi

      - name: Get deployment URLs
        id: get-urls
        run: |
          NAME_PREFIX="pbooking"
          REVISION_LABEL="pr-${{ inputs.pr_number }}"

          if [ "${{ inputs.environment_type }}" == "preview" ]; then
            # For PR environments, use the label-based URL (stable across updates)
            # Label URL format: https://{app-name}---{label}.{region}.azurecontainerapps.io

            # Get container app location
            LOCATION=$(az containerapp show \
              --name ${NAME_PREFIX}-frontend \
              --resource-group ${{ inputs.resource_group }} \
              --query location -o tsv)

            # Construct label-based URLs (these stay the same even when revision changes)
            FRONTEND_URL="https://${NAME_PREFIX}-frontend---${REVISION_LABEL}.${LOCATION}.azurecontainerapps.io"
            BACKEND_URL="https://${NAME_PREFIX}-backend---${REVISION_LABEL}.${LOCATION}.azurecontainerapps.io"

            echo "Using label-based URLs (stable across updates):"
            echo "Frontend label URL: ${FRONTEND_URL}"
            echo "Backend label URL: ${BACKEND_URL}"
          else
            # For production, get the main FQDN
            FRONTEND_FQDN=$(az containerapp show \
              --name ${NAME_PREFIX}-frontend \
              --resource-group ${{ inputs.resource_group }} \
              --query properties.configuration.ingress.fqdn -o tsv)

            BACKEND_FQDN=$(az containerapp show \
              --name ${NAME_PREFIX}-backend \
              --resource-group ${{ inputs.resource_group }} \
              --query properties.configuration.ingress.fqdn -o tsv)

            FRONTEND_URL="https://${FRONTEND_FQDN}"
            BACKEND_URL="https://${BACKEND_FQDN}"
          fi

          echo "Frontend URL: ${FRONTEND_URL}"
          echo "Backend URL: ${BACKEND_URL}"

          echo "frontend-url=${FRONTEND_URL}" >> $GITHUB_OUTPUT
          echo "backend-url=${BACKEND_URL}" >> $GITHUB_OUTPUT
