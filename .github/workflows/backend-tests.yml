name: Backend Tests & Coverage

on:
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'

jobs:
  test:
    name: Run Tests with Coverage
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        working-directory: ./backend
        run: dotnet restore

      - name: Build solution
        working-directory: ./backend
        run: dotnet build --no-restore --configuration Release

      - name: Run tests with coverage
        working-directory: ./backend
        run: |
          dotnet test \
            --no-build \
            --configuration Release \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults \
            --logger "trx;LogFileName=test-results.trx" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.3.11
        with:
          reports: 'backend/TestResults/**/coverage.opencover.xml'
          targetdir: 'backend/CoverageReport'
          reporttypes: 'HtmlInline;Cobertura;MarkdownSummaryGithub'
          sourcedirs: 'backend'
          title: 'Backend Code Coverage'

      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: backend/CoverageReport/
          retention-days: 30

      - name: Upload test results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: backend/TestResults/
          retention-days: 30

      - name: Add coverage summary to PR
        if: github.event_name == 'pull_request'
        run: |
          if [ -f backend/CoverageReport/SummaryGithub.md ]; then
            cat backend/CoverageReport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
          fi

      - name: Calculate diff coverage
        id: coverage
        if: github.event_name == 'pull_request'
        run: |
          python3 << 'EOF'
          import xml.etree.ElementTree as ET
          import glob
          import subprocess
          import re
          import os

          # Get the base branch (target of PR)
          base_ref = os.environ.get('GITHUB_BASE_REF', 'main')

          # Fetch base branch
          subprocess.run(['git', 'fetch', 'origin', f'{base_ref}:{base_ref}'], check=False)

          # Get diff for changed lines in backend directory
          diff_output = subprocess.run(
              ['git', 'diff', f'origin/{base_ref}...HEAD', '--unified=0', '--', 'backend/'],
              capture_output=True,
              text=True
          ).stdout

          # Parse diff to get changed lines per file
          changed_lines = {}  # {file_path: set of line numbers}
          current_file = None

          for line in diff_output.split('\n'):
              if line.startswith('+++'):
                  # New file path
                  match = re.match(r'\+\+\+ b/(.*)', line)
                  if match:
                      current_file = match.group(1)
                      changed_lines[current_file] = set()
              elif line.startswith('@@'):
                  # Line range: @@ -old +new @@
                  match = re.search(r'\+(\d+)(?:,(\d+))?', line)
                  if match and current_file:
                      start_line = int(match.group(1))
                      count = int(match.group(2)) if match.group(2) else 1
                      for i in range(start_line, start_line + count):
                          changed_lines[current_file].add(i)

          # Parse coverage report
          coverage_files = glob.glob('backend/TestResults/*/coverage.opencover.xml')

          if not coverage_files or not changed_lines:
              print("0")
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write("line_coverage=0\n")
              exit(0)

          tree = ET.parse(coverage_files[0])
          root = tree.getroot()

          # Track coverage for changed lines
          total_changed_lines = 0
          covered_changed_lines = 0

          # Iterate through files in coverage report
          for file_elem in root.findall('.//File'):
              file_path = file_elem.get('fullPath', '')

              # Normalize paths for comparison
              rel_path = None
              if 'backend/' in file_path:
                  rel_path = file_path[file_path.index('backend/'):]

              if not rel_path or rel_path not in changed_lines:
                  continue

              # Check coverage for each changed line in this file
              for line_num in changed_lines[rel_path]:
                  total_changed_lines += 1

                  # Check if this line is in coverage data
                  for seq_point in file_elem.findall('.//SequencePoint'):
                      sl = int(seq_point.get('sl', 0))  # start line
                      vc = int(seq_point.get('vc', 0))  # visit count

                      if sl == line_num and vc > 0:
                          covered_changed_lines += 1
                          break

          # Calculate percentage
          if total_changed_lines > 0:
              coverage_percent = round((covered_changed_lines / total_changed_lines) * 100, 2)
          else:
              coverage_percent = 100  # No changes to production code

          print(f"{coverage_percent}")
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"line_coverage={coverage_percent}\n")
              f.write(f"covered_lines={covered_changed_lines}\n")
              f.write(f"total_lines={total_changed_lines}\n")
          EOF

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            let coverageSummary = '';
            const summaryPath = 'backend/CoverageReport/SummaryGithub.md';

            if (fs.existsSync(summaryPath)) {
              coverageSummary = fs.readFileSync(summaryPath, 'utf8');

              // Remove the "Summary" header section if present
              coverageSummary = coverageSummary.replace(/## Summary[\s\S]*?(?=##|$)/, '');

              // Clean up any leading/trailing whitespace
              coverageSummary = coverageSummary.trim();
            }

            const lineCoverage = '${{ steps.coverage.outputs.line_coverage }}';
            const coveredLines = '${{ steps.coverage.outputs.covered_lines }}';
            const totalLines = '${{ steps.coverage.outputs.total_lines }}';
            const coveragePercent = parseFloat(lineCoverage);

            // Use checkmark for passing (>=90%), red X for failing
            let coverageIcon = '❌';
            if (coveragePercent >= 90) {
              coverageIcon = '✅';
            }

            const body = `${coverageIcon} **${lineCoverage}%** of changed lines covered (${coveredLines}/${totalLines})

            ${coverageSummary}
            `;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('changed lines covered')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Check coverage threshold
        if: github.event_name == 'pull_request'
        run: |
          COVERAGE="${{ steps.coverage.outputs.line_coverage }}"
          THRESHOLD=90

          echo "Changed Lines Coverage: $COVERAGE%"
          echo "Threshold: $THRESHOLD%"

          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "::warning::Changed lines coverage ($COVERAGE%) is below the threshold ($THRESHOLD%)"
          else
            echo "::notice::Changed lines coverage ($COVERAGE%) meets the threshold ($THRESHOLD%)"
          fi
