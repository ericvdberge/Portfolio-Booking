name: Deploy Template (Reusable)

on:
  workflow_call:
    inputs:
      environment_type:
        description: 'Deployment environment type'
        required: true
        type: string  # 'production' or 'preview'

      resource_group:
        description: 'Azure resource group name'
        required: true
        type: string  # 'BookingSystem' or 'BookingSystem-PR'

      deployment_suffix:
        description: 'Deployment suffix for multi-revision (empty for production)'
        required: false
        type: string
        default: ''  # Empty for prod, 'pr-123' for preview

      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        type: string  # 'latest' or 'pr-123'

      pr_number:
        description: 'Pull request number (for preview deployments only)'
        required: false
        type: string
        default: ''

    secrets:
      azure_client_id:
        required: true
      azure_tenant_id:
        required: true
      azure_subscription_id:
        required: true
      db_password:
        required: true
      user_principal_id:
        required: false  # Only needed for production
      github_token:
        required: false  # Only needed for PR comments

    outputs:
      frontend_url:
        description: 'Frontend URL of deployed environment'
        value: ${{ jobs.deploy.outputs.frontend-url }}
      backend_url:
        description: 'Backend URL of deployed environment'
        value: ${{ jobs.deploy.outputs.backend-url }}

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ericvdberge/portfolio-booking/backend
  FRONTEND_IMAGE_NAME: ericvdberge/portfolio-booking/frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      backend-tag: ${{ steps.build-backend.outputs.tags }}
      frontend-tag: ${{ steps.build-frontend.outputs.tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Booking.Api/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ inputs.image_tag }}

      - name: Build and push frontend image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ inputs.image_tag }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    outputs:
      frontend-url: ${{ steps.get-urls.outputs.frontend-url }}
      backend-url: ${{ steps.get-urls.outputs.backend-url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.azure_client_id }}
          tenant-id: ${{ secrets.azure_tenant_id }}
          subscription-id: ${{ secrets.azure_subscription_id }}

      - name: Deploy infrastructure
        id: deploy
        run: |
          TEMPLATE_FILE="infrastructure/azure-setup.bicep"

          if [ "${{ inputs.environment_type }}" == "production" ]; then
            # Production deployment
            DEPLOYMENT_HASH=$(date +%s | sha256sum | head -c 5)
            DEPLOYMENT_NAME="production-${DEPLOYMENT_HASH}"
            PARAMS="namePrefix=pbooking location=swedencentral"
            PARAMS="${PARAMS} environmentType=production"
            PARAMS="${PARAMS} prNumber=''"
            PARAMS="${PARAMS} backendImage=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ inputs.image_tag }}"
            PARAMS="${PARAMS} frontendImage=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ inputs.image_tag }}"
            PARAMS="${PARAMS} databasePassword=${{ secrets.db_password }}"
            PARAMS="${PARAMS} userPrincipalId=${{ secrets.user_principal_id }}"
            PARAMS="${PARAMS} deploymentHash=${DEPLOYMENT_HASH}"
          else
            # Preview deployment
            DEPLOYMENT_NAME="pr-${{ inputs.pr_number }}"
            PARAMS="namePrefix=pbooking location=swedencentral"
            PARAMS="${PARAMS} environmentType=preview"
            PARAMS="${PARAMS} prNumber=${{ inputs.pr_number }}"
            PARAMS="${PARAMS} backendImage=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ inputs.image_tag }}"
            PARAMS="${PARAMS} frontendImage=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ inputs.image_tag }}"
            PARAMS="${PARAMS} databasePassword=${{ secrets.db_password }}"
            PARAMS="${PARAMS} deploymentHash=''"
          fi

          echo "Deploying to ${{ inputs.resource_group }} as ${DEPLOYMENT_NAME}"
          echo "Using template: ${TEMPLATE_FILE}"
          echo "Environment type: ${{ inputs.environment_type }}"

          az deployment group create \
            --resource-group ${{ inputs.resource_group }} \
            --name ${DEPLOYMENT_NAME} \
            --template-file ${TEMPLATE_FILE} \
            --parameters ${PARAMS}

      - name: Get deployment URLs
        id: get-urls
        run: |
          if [ "${{ inputs.environment_type }}" == "production" ]; then
            DEPLOYMENT_NAME=$(az deployment group list \
              --resource-group ${{ inputs.resource_group }} \
              --query "[?contains(name, 'production-')].name | [0]" -o tsv)
          else
            DEPLOYMENT_NAME="pr-${{ inputs.pr_number }}"
          fi

          FRONTEND_URL=$(az deployment group show \
            --resource-group ${{ inputs.resource_group }} \
            --name ${DEPLOYMENT_NAME} \
            --query properties.outputs.frontendUrl.value -o tsv)

          BACKEND_URL=$(az deployment group show \
            --resource-group ${{ inputs.resource_group }} \
            --name ${DEPLOYMENT_NAME} \
            --query properties.outputs.backendUrl.value -o tsv)

          echo "frontend-url=${FRONTEND_URL}" >> $GITHUB_OUTPUT
          echo "backend-url=${BACKEND_URL}" >> $GITHUB_OUTPUT
